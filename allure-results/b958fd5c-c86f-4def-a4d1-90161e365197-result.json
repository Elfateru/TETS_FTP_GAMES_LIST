{"name": "test_filter_by_platform", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка при возврате фильтра Platform в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nassert 0 > 0\n +  where 0 = len([])", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"981749fac9be612a6879192b41e7f271\")>\ntest_config = Config(srv=Service(URL='https://makarovartem.github.io/frontend-avito-tech-test-assignment'), cards=TestCards(PARENT_S...ITEM='.ant-select-selection-item', SELECTION_DROPDOWN='.ant-select-dropdown', SELECTION_LIST='ul.ant-list-items > li'))\n\n    @allure.feature(\"Filter\")\n    @allure.story(\"Фильтр по платформе (Platform)\")\n    def test_filter_by_platform(driver: webdriver.Chrome, test_config: config.Config) -> None:\n        url = test_config.srv.URL\n        selection_list = test_config.filter_by_platform.SELECTION_LIST\n        selection_item = test_config.filter_by_platform.SELECTION_ITEM\n        selection_dropdown = test_config.filter_by_platform.SELECTION_DROPDOWN\n        driver.get(url)\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Находим фильтр платформы и проверяем дефолтное значение\"):\n            # Первый .ant-select — это фильтр по платформе\n            filter_platform = driver.find_elements(By.CSS_SELECTOR, \"div.ant-select\")[0]\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, selection_item)\n            assert dropdown.text.lower() == \"not chosen\", f\"Фильтр не в дефолтном состоянии: {dropdown.text}\"\n    \n        with allure.step(\"Выбираем 'PC'\"):\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            # Находим опцию \"PC\" среди видимых элементов дропдауна\n            pc_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='PC']\")\n                )\n            )\n            pc_option.click()\n            time.sleep(1)\n            cards_pc = driver.find_elements(By.CSS_SELECTOR, selection_list)\n            assert len(cards_pc) > 0, \"Нет карточек для платформы 'PC'\"\n    \n        with allure.step(\"Сбрасываем фильтр обратно на 'not chosen' и проверяем баг\"):\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, selection_item)\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            not_chosen_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='not chosen']\")\n                )\n            )\n            not_chosen_option.click()\n            time.sleep(1)\n            try:\n                cards_all = driver.find_elements(By.CSS_SELECTOR, selection_list)\n>               assert len(cards_all) > 0, \"Нет карточек после сброса фильтра на 'not chosen'\"\nE               AssertionError: Нет карточек после сброса фильтра на 'not chosen'\nE               assert 0 > 0\nE                +  where 0 = len([])\n\ntests\\test_filter_by_platform.py:53: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"981749fac9be612a6879192b41e7f271\")>\ntest_config = Config(srv=Service(URL='https://makarovartem.github.io/frontend-avito-tech-test-assignment'), cards=TestCards(PARENT_S...ITEM='.ant-select-selection-item', SELECTION_DROPDOWN='.ant-select-dropdown', SELECTION_LIST='ul.ant-list-items > li'))\n\n    @allure.feature(\"Filter\")\n    @allure.story(\"Фильтр по платформе (Platform)\")\n    def test_filter_by_platform(driver: webdriver.Chrome, test_config: config.Config) -> None:\n        url = test_config.srv.URL\n        selection_list = test_config.filter_by_platform.SELECTION_LIST\n        selection_item = test_config.filter_by_platform.SELECTION_ITEM\n        selection_dropdown = test_config.filter_by_platform.SELECTION_DROPDOWN\n        driver.get(url)\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Находим фильтр платформы и проверяем дефолтное значение\"):\n            # Первый .ant-select — это фильтр по платформе\n            filter_platform = driver.find_elements(By.CSS_SELECTOR, \"div.ant-select\")[0]\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, selection_item)\n            assert dropdown.text.lower() == \"not chosen\", f\"Фильтр не в дефолтном состоянии: {dropdown.text}\"\n    \n        with allure.step(\"Выбираем 'PC'\"):\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            # Находим опцию \"PC\" среди видимых элементов дропдауна\n            pc_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='PC']\")\n                )\n            )\n            pc_option.click()\n            time.sleep(1)\n            cards_pc = driver.find_elements(By.CSS_SELECTOR, selection_list)\n            assert len(cards_pc) > 0, \"Нет карточек для платформы 'PC'\"\n    \n        with allure.step(\"Сбрасываем фильтр обратно на 'not chosen' и проверяем баг\"):\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, selection_item)\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            not_chosen_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='not chosen']\")\n                )\n            )\n            not_chosen_option.click()\n            time.sleep(1)\n            try:\n                cards_all = driver.find_elements(By.CSS_SELECTOR, selection_list)\n                assert len(cards_all) > 0, \"Нет карточек после сброса фильтра на 'not chosen'\"\n            except Exception as e:\n                # Allure attachment: page source при падении\n                allure.attach(driver.page_source, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n>               raise AssertionError(f\"Ошибка при возврате фильтра Platform в 'not chosen': {e}\")\nE               AssertionError: Ошибка при возврате фильтра Platform в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nE               assert 0 > 0\nE                +  where 0 = len([])\n\ntests\\test_filter_by_platform.py:57: AssertionError"}, "steps": [{"name": "Находим фильтр платформы и проверяем дефолтное значение", "status": "passed", "start": 1750005443241, "stop": 1750005443259}, {"name": "Выбираем 'PC'", "status": "passed", "start": 1750005443259, "stop": 1750005445016}, {"name": "Сбрасываем фильтр обратно на 'not chosen' и проверяем баг", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка при возврате фильтра Platform в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nassert 0 > 0\n +  where 0 = len([])\n", "trace": "  File \"C:\\Users\\FATE\\PycharmProjects\\TEST_FTP_GAMES_LIST\\tests\\test_filter_by_platform.py\", line 57, in test_filter_by_platform\n    raise AssertionError(f\"Ошибка при возврате фильтра Platform в 'not chosen': {e}\")\n"}, "attachments": [{"name": "page_source", "source": "d46f4871-e54b-466e-84cd-78dcee8fd782-attachment.html", "type": "text/html"}], "start": 1750005445016, "stop": 1750005446751}], "attachments": [{"name": "screenshot_on_failure", "source": "4ace7f4c-727b-45a8-8003-5429e667059c-attachment.png", "type": "image/png"}], "start": 1750005443176, "stop": 1750005446752, "uuid": "8770884b-0bce-4f86-9524-c1b2128b10d1", "historyId": "d28536f8e029a24f2a2436cf0bea4f98", "testCaseId": "d28536f8e029a24f2a2436cf0bea4f98", "fullName": "tests.test_filter_by_platform#test_filter_by_platform", "labels": [{"name": "feature", "value": "Filter"}, {"name": "story", "value": "Фильтр по платформе (Platform)"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_filter_by_platform"}, {"name": "host", "value": "DESKTOP-VNCOHUV"}, {"name": "thread", "value": "4404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_filter_by_platform"}]}