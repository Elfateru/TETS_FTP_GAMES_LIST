{"name": "test_filter_by_platform", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка при возврате фильтра Platform в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nassert 0 > 0\n +  where 0 = len([])", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9250cbbffdf1584f5c03f4b872905db5\")>\n\n    @allure.feature(\"Filter\")\n    @allure.story(\"Фильтр по платформе (Platform)\")\n    def test_filter_by_platform(driver):\n        url = \"https://makarovartem.github.io/frontend-avito-tech-test-assignment\"\n        driver.get(url)\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Находим фильтр платформы и проверяем дефолтное значение\"):\n            # Первый .ant-select — это фильтр по платформе\n            filter_platform = driver.find_elements(By.CSS_SELECTOR, \"div.ant-select\")[0]\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, \".ant-select-selection-item\")\n            assert dropdown.text.lower() == \"not chosen\", f\"Фильтр не в дефолтном состоянии: {dropdown.text}\"\n    \n        with allure.step(\"Выбираем 'PC'\"):\n            dropdown.click()\n            # Ждём появления выпадающего меню\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \".ant-select-dropdown\")))\n            # Находим опцию \"PC\" среди видимых элементов дропдауна\n            pc_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='PC']\")\n                )\n            )\n            pc_option.click()\n            time.sleep(1)  # Можно убрать, если данные приходят моментально\n            cards_pc = driver.find_elements(By.CSS_SELECTOR, \"ul.ant-list-items > li\")\n            assert len(cards_pc) > 0, \"Нет карточек для платформы 'PC'\"\n    \n        with allure.step(\"Сбрасываем фильтр обратно на 'not chosen' и проверяем баг\"):\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, \".ant-select-selection-item\")\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \".ant-select-dropdown\")))\n            not_chosen_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='not chosen']\")\n                )\n            )\n            not_chosen_option.click()\n            time.sleep(1)\n            try:\n                cards_all = driver.find_elements(By.CSS_SELECTOR, \"ul.ant-list-items > li\")\n>               assert len(cards_all) > 0, \"Нет карточек после сброса фильтра на 'not chosen'\"\nE               AssertionError: Нет карточек после сброса фильтра на 'not chosen'\nE               assert 0 > 0\nE                +  where 0 = len([])\n\ntests\\test_filter_by_platform.py:49: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9250cbbffdf1584f5c03f4b872905db5\")>\n\n    @allure.feature(\"Filter\")\n    @allure.story(\"Фильтр по платформе (Platform)\")\n    def test_filter_by_platform(driver):\n        url = \"https://makarovartem.github.io/frontend-avito-tech-test-assignment\"\n        driver.get(url)\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Находим фильтр платформы и проверяем дефолтное значение\"):\n            # Первый .ant-select — это фильтр по платформе\n            filter_platform = driver.find_elements(By.CSS_SELECTOR, \"div.ant-select\")[0]\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, \".ant-select-selection-item\")\n            assert dropdown.text.lower() == \"not chosen\", f\"Фильтр не в дефолтном состоянии: {dropdown.text}\"\n    \n        with allure.step(\"Выбираем 'PC'\"):\n            dropdown.click()\n            # Ждём появления выпадающего меню\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \".ant-select-dropdown\")))\n            # Находим опцию \"PC\" среди видимых элементов дропдауна\n            pc_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='PC']\")\n                )\n            )\n            pc_option.click()\n            time.sleep(1)  # Можно убрать, если данные приходят моментально\n            cards_pc = driver.find_elements(By.CSS_SELECTOR, \"ul.ant-list-items > li\")\n            assert len(cards_pc) > 0, \"Нет карточек для платформы 'PC'\"\n    \n        with allure.step(\"Сбрасываем фильтр обратно на 'not chosen' и проверяем баг\"):\n            dropdown = filter_platform.find_element(By.CSS_SELECTOR, \".ant-select-selection-item\")\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \".ant-select-dropdown\")))\n            not_chosen_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-dropdown')]//div[contains(@class,'ant-select-item-option-content') and text()='not chosen']\")\n                )\n            )\n            not_chosen_option.click()\n            time.sleep(1)\n            try:\n                cards_all = driver.find_elements(By.CSS_SELECTOR, \"ul.ant-list-items > li\")\n                assert len(cards_all) > 0, \"Нет карточек после сброса фильтра на 'not chosen'\"\n            except Exception as e:\n                # Allure attachment: page source при падении\n                allure.attach(driver.page_source, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n>               raise AssertionError(f\"Ошибка при возврате фильтра Platform в 'not chosen': {e}\")\nE               AssertionError: Ошибка при возврате фильтра Platform в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nE               assert 0 > 0\nE                +  where 0 = len([])\n\ntests\\test_filter_by_platform.py:53: AssertionError"}, "steps": [{"name": "Находим фильтр платформы и проверяем дефолтное значение", "status": "passed", "start": 1749993938311, "stop": 1749993938334}, {"name": "Выбираем 'PC'", "status": "passed", "start": 1749993938334, "stop": 1749993940133}, {"name": "Сбрасываем фильтр обратно на 'not chosen' и проверяем баг", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка при возврате фильтра Platform в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nassert 0 > 0\n +  where 0 = len([])\n", "trace": "  File \"C:\\Users\\FATE\\PycharmProjects\\TETS_FTP_GAMES_LIST\\tests\\test_filter_by_platform.py\", line 53, in test_filter_by_platform\n    raise AssertionError(f\"Ошибка при возврате фильтра Platform в 'not chosen': {e}\")\n"}, "attachments": [{"name": "page_source", "source": "dbee60ce-d514-4252-b28b-415d68f75dd8-attachment.html", "type": "text/html"}], "start": 1749993940133, "stop": 1749993941864}], "attachments": [{"name": "screenshot_on_failure", "source": "3a19f76b-8500-49cd-85d6-e287e96779dd-attachment.png", "type": "image/png"}], "start": 1749993938247, "stop": 1749993941865, "uuid": "81781729-4a57-460a-861a-94d38bc2a7fc", "historyId": "d28536f8e029a24f2a2436cf0bea4f98", "testCaseId": "d28536f8e029a24f2a2436cf0bea4f98", "fullName": "tests.test_filter_by_platform#test_filter_by_platform", "labels": [{"name": "story", "value": "Фильтр по платформе (Platform)"}, {"name": "feature", "value": "Filter"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_filter_by_platform"}, {"name": "host", "value": "DESKTOP-VNCOHUV"}, {"name": "thread", "value": "7776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_filter_by_platform"}]}