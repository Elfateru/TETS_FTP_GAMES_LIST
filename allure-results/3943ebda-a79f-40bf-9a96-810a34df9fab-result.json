{"name": "test_filter_by_category", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка при возврате фильтра Category в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nassert 0 > 0\n +  where 0 = len([])", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"94e8b423d1c1b3a38377eef59dbd07dc\")>\ntest_config = Config(srv=Service(URL='https://makarovartem.github.io/frontend-avito-tech-test-assignment'), cards=TestCards(PARENT_S...ITEM='.ant-select-selection-item', SELECTION_DROPDOWN='.ant-select-dropdown', SELECTION_LIST='ul.ant-list-items > li'))\n\n    @allure.feature(\"Filter\")\n    @allure.story(\"Фильтр по категории (Category)\")\n    def test_filter_by_category(driver: webdriver.Chrome, test_config: config.Config) -> None:\n        url = test_config.srv.URL\n        driver.get(url)\n        selection_item = test_config.filter_by_category.SELECTION_ITEM\n        selection_dropdown = test_config.filter_by_category.SELECTION_DROPDOWN\n        selection_list = test_config.filter_by_category.SELECTION_LIST\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Находим фильтр категории и проверяем дефолтное значение\"):\n            filter_category = driver.find_elements(By.CSS_SELECTOR, \"div.ant-select\")[1]\n            dropdown = filter_category.find_element(By.CSS_SELECTOR, selection_item)\n            assert dropdown.text.lower() == \"not chosen\", f\"Фильтр не в дефолтном состоянии: {dropdown.text}\"\n    \n        with allure.step(\"Выбираем категорию 'shooter'\"):\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            category_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-item-option-content') and text()='shooter']\")\n                )\n            )\n            category_option.click()\n            time.sleep(1)\n            cards = driver.find_elements(By.CSS_SELECTOR, selection_list)\n            assert len(cards) > 0, \"Нет карточек для категории 'shooter'\"\n    \n        with allure.step(\"Сбрасываем фильтр обратно на 'not chosen' и проверяем баг\"):\n            dropdown = filter_category.find_element(By.CSS_SELECTOR, selection_item)\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            not_chosen_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-item-option-content') and text()='not chosen']\")\n                )\n            )\n            not_chosen_option.click()\n            time.sleep(1)\n            try:\n                cards_all = driver.find_elements(By.CSS_SELECTOR, selection_list)\n>               assert len(cards_all) > 0, \"Нет карточек после сброса фильтра на 'not chosen'\"\nE               AssertionError: Нет карточек после сброса фильтра на 'not chosen'\nE               assert 0 > 0\nE                +  where 0 = len([])\n\ntests\\test_filter_by_category.py:51: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"94e8b423d1c1b3a38377eef59dbd07dc\")>\ntest_config = Config(srv=Service(URL='https://makarovartem.github.io/frontend-avito-tech-test-assignment'), cards=TestCards(PARENT_S...ITEM='.ant-select-selection-item', SELECTION_DROPDOWN='.ant-select-dropdown', SELECTION_LIST='ul.ant-list-items > li'))\n\n    @allure.feature(\"Filter\")\n    @allure.story(\"Фильтр по категории (Category)\")\n    def test_filter_by_category(driver: webdriver.Chrome, test_config: config.Config) -> None:\n        url = test_config.srv.URL\n        driver.get(url)\n        selection_item = test_config.filter_by_category.SELECTION_ITEM\n        selection_dropdown = test_config.filter_by_category.SELECTION_DROPDOWN\n        selection_list = test_config.filter_by_category.SELECTION_LIST\n        wait = WebDriverWait(driver, 10)\n    \n        with allure.step(\"Находим фильтр категории и проверяем дефолтное значение\"):\n            filter_category = driver.find_elements(By.CSS_SELECTOR, \"div.ant-select\")[1]\n            dropdown = filter_category.find_element(By.CSS_SELECTOR, selection_item)\n            assert dropdown.text.lower() == \"not chosen\", f\"Фильтр не в дефолтном состоянии: {dropdown.text}\"\n    \n        with allure.step(\"Выбираем категорию 'shooter'\"):\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            category_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-item-option-content') and text()='shooter']\")\n                )\n            )\n            category_option.click()\n            time.sleep(1)\n            cards = driver.find_elements(By.CSS_SELECTOR, selection_list)\n            assert len(cards) > 0, \"Нет карточек для категории 'shooter'\"\n    \n        with allure.step(\"Сбрасываем фильтр обратно на 'not chosen' и проверяем баг\"):\n            dropdown = filter_category.find_element(By.CSS_SELECTOR, selection_item)\n            dropdown.click()\n            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, selection_dropdown)))\n            not_chosen_option = wait.until(\n                EC.element_to_be_clickable(\n                    (By.XPATH, \"//div[contains(@class,'ant-select-item-option-content') and text()='not chosen']\")\n                )\n            )\n            not_chosen_option.click()\n            time.sleep(1)\n            try:\n                cards_all = driver.find_elements(By.CSS_SELECTOR, selection_list)\n                assert len(cards_all) > 0, \"Нет карточек после сброса фильтра на 'not chosen'\"\n            except Exception as e:\n                allure.attach(driver.page_source, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n>               raise AssertionError(f\"Ошибка при возврате фильтра Category в 'not chosen': {e}\")\nE               AssertionError: Ошибка при возврате фильтра Category в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nE               assert 0 > 0\nE                +  where 0 = len([])\n\ntests\\test_filter_by_category.py:54: AssertionError"}, "steps": [{"name": "Находим фильтр категории и проверяем дефолтное значение", "status": "passed", "start": 1750005214647, "stop": 1750005214745}, {"name": "Выбираем категорию 'shooter'", "status": "passed", "start": 1750005214745, "stop": 1750005216426}, {"name": "Сбрасываем фильтр обратно на 'not chosen' и проверяем баг", "status": "failed", "statusDetails": {"message": "AssertionError: Ошибка при возврате фильтра Category в 'not chosen': Нет карточек после сброса фильтра на 'not chosen'\nassert 0 > 0\n +  where 0 = len([])\n", "trace": "  File \"C:\\Users\\FATE\\PycharmProjects\\TEST_FTP_GAMES_LIST\\tests\\test_filter_by_category.py\", line 54, in test_filter_by_category\n    raise AssertionError(f\"Ошибка при возврате фильтра Category в 'not chosen': {e}\")\n"}, "attachments": [{"name": "page_source", "source": "587fe3be-2b3f-41b8-b5ac-8d8928516fd4-attachment.html", "type": "text/html"}], "start": 1750005216426, "stop": 1750005218148}], "attachments": [{"name": "screenshot_on_failure", "source": "7cc75c4f-1a19-48cd-88e1-780943f788bb-attachment.png", "type": "image/png"}], "start": 1750005214568, "stop": 1750005218150, "uuid": "45868892-ad62-4f1c-bc29-dbbc9933b309", "historyId": "caada634f8fe032b72106d2788cd02dc", "testCaseId": "caada634f8fe032b72106d2788cd02dc", "fullName": "tests.test_filter_by_category#test_filter_by_category", "labels": [{"name": "story", "value": "Фильтр по категории (Category)"}, {"name": "feature", "value": "Filter"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_filter_by_category"}, {"name": "host", "value": "DESKTOP-VNCOHUV"}, {"name": "thread", "value": "11156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_filter_by_category"}]}